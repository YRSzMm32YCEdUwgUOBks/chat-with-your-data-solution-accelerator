services:
  postgres:
    image: ankane/pgvector:latest
    container_name: postgres-cwyd
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      # Let Compose know when Postgres is ready
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrate:
    build:
      context: ./scripts/data_scripts
      dockerfile: Dockerfile
    container_name: migrate-cwyd
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    environment:
      host: postgres
      user: postgres
      password: postgres
      dbname: postgres
      AZURE_AUTH_ENABLED: "false"
    command: ["python", "create_postgres_tables.py"]

  frontend:
    build:
      context: .
      dockerfile: docker/Frontend.Dockerfile
      args:
        VITE_BACKEND_URL: ${VITE_BACKEND_URL}
    container_name: frontend-cwyd
    ports:
      - "8080:80"
    env_file:
      - ./.env
    environment:
      - BACKEND_URL=http://azure_function:80
      - AZURE_AUTH_ENABLED=false
      - USE_DEFAULT_CONFIG=true
      - LOAD_CONFIG_FROM_BLOB_STORAGE=false
      - CONVERSATION_FLOW=byod
      - LOG_USER_INTERACTIONS=false
      - LOG_TOKENS=false
      - ORCHESTRATION_STRATEGY=simple
      - DATABASE_TYPE=PostgreSQL
      # Add PostgreSQL connection variables for chat history
      - POSTGRESQL_HOST=postgres
      - POSTGRESQL_DB=postgres
      - POSTGRESQL_USER=postgres
      - POSTGRESQL_PASSWORD=postgres
      # Add OpenAI variables directly from host environment
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION}
      - AZURE_OPENAI_MODEL=${AZURE_OPENAI_MODEL}
      # Add Speech variables
      - AZURE_SPEECH_KEY=mock-speech-key
      - AZURE_SPEECH_REGION=eastus
      - AZURE_SPEECH_ENDPOINT=https://eastus.api.cognitive.microsoft.com/
      # Set USE_LOCAL_MOCK_SERVICES for chat and speech
      - USE_LOCAL_MOCK_SERVICES=false
      # Disable Azure Monitor to fix the missing module error
      - ENABLE_MONITORING=false
      - APPLICATIONINSIGHTS_CONNECTION_STRING=
      - APPLICATION_INSIGHTS_ENABLED=false
      # Vite variable for API backend endpoint
      - VITE_BACKEND_URL=http://localhost:8088
    volumes:
      - ./code/frontend:/home/node/app/frontend:ro
      - ./.env:/usr/src/app/.env:ro
    depends_on:
      - azurite
      - postgres
      - azure_function

  azure_function:
    build:
      context: ./code/azure_function
      dockerfile: Dockerfile
    container_name: azure-function-cwyd
    ports:
      # when azure function in container it exposes port 80 (also locally)
      - "8088:80"
    environment:
      # AzureWebJobsStorage and POSTGRES_CONNECTION_STRING remain here for local dev
      AzureWebJobsStorage: "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;QueueEndpoint=http://azurite:10001/devstoreaccount1;TableEndpoint=http://azurite:10002/devstoreaccount1;"
      POSTGRES_CONNECTION_STRING: "postgres://postgres:postgres@postgres:5432/postgres"
      CONTAINER_NAME: "local"
      CORS_ALLOWED_ORIGINS: '["http://localhost:8080"]'
      CORS_ALLOWED_METHODS: '["GET","POST","OPTIONS"]'
      CORS_ALLOWED_HEADERS: '["Content-Type","Authorization"]'
      CORS_SUPPORT_CREDENTIALS: "false"
      AZURE_AUTH_ENABLED: "false"
    env_file:
      - ./.env
    depends_on:
      azurite:
        condition: service_started

  # Add Azurite for local Azure Blob Storage emulation
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: azurite-cwyd
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    command: "azurite --oauth basic --blobHost 0.0.0.0 --blobPort 10000 --queueHost 0.0.0.0 --queuePort 10001 --tableHost 0.0.0.0 --tablePort 10002"

volumes:
  db-data:

# Note: the legacy 'backend' and 'admin' services have been removed.
# Use the 'azure_function' service (port 8088 â†’ 80) instead.
